// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

enum UserRole {
  USER
  ADMIN
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmationCode twoFactorConfirmation?
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String  @unique
  expires   DateTime
  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String  @unique
  expires   DateTime
  @@unique([email, token])
}
model TwoFactorToken {
  id        String   @id @default(cuid())
  email     String
  token     String  @unique
  expires   DateTime
  @@unique([email, token])
}

model twoFactorConfirmation {
  id        String   @id @default(cuid())
  userId    String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId])
}

model Session {
  id        String      @id @default(cuid())
  userId    String   
  name      String   @default("New Session")
  createdAt DateTime @db.Timestamp
  updatedAt DateTime @db.Timestamp
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  id        String      @id @default(cuid())
  sessionId String   
  sender    String   @db.VarChar(255)
  content   String   @db.Text
  createdAt DateTime @db.Timestamp
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}