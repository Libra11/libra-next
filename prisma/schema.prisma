// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

enum UserRole {
  USER
  ADMIN
}
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmationCode twoFactorConfirmation?
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String
  token     String  @unique
  expires   DateTime
  @@unique([email, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String  @unique
  expires   DateTime
  @@unique([email, token])
}
model TwoFactorToken {
  id        String   @id @default(cuid())
  email     String
  token     String  @unique
  expires   DateTime
  @@unique([email, token])
}

model twoFactorConfirmation {
  id        String   @id @default(cuid())
  userId    String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId])
}

model Session {
  id        String      @id @default(cuid())
  userId    String   
  name      String   @default("New Session")
  createdAt DateTime @db.Timestamp
  updatedAt DateTime @db.Timestamp
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  id        String      @id @default(cuid())
  sessionId String   
  sender    String   @db.VarChar(255)
  content   String   @db.Text
  createdAt DateTime @db.Timestamp
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model Phonetic {
  id      Int      @id @default(autoincrement())
  name    String
  value   String
  phonetic String
  wordId  Int
  word    Word     @relation(fields: [wordId], references: [id])
}

model Translation {
  id     Int    @id @default(autoincrement())
  pos    String
  trans  String
  wordId Int
  word   Word   @relation(fields: [wordId], references: [id])
}

model Word {
  id               Int            @id @default(autoincrement())
  textContent      String        @unique
  phoneticsArray   Phonetic[]
  translationsArray Translation[]
}

model InterviewQuestion {
  id             Int       @id @default(autoincrement())
  questionText   String
  answerContent  String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  difficulty     Difficulty
  isActive       Boolean   @default(true) // Optional: To indicate if the question is still in use
  categoryId     Int
  category       Category  @relation(fields: [categoryId], references: [id])
  tags           QuestionTag[]
  
  @@index([categoryId], name: "category_idx")
}

model Category {
  id             Int       @id @default(autoincrement())
  name           String    @unique
  questions      InterviewQuestion[]
}

model Tag {
  id             Int       @id @default(autoincrement())
  name           String    @unique
  questions      QuestionTag[]
}

model QuestionTag {
  questionId     Int
  tagId          Int
  question       InterviewQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  tag            Tag @relation(fields: [tagId], references: [id])
  
  @@id([questionId, tagId])
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model Paragraph {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  audio_url   String
  srt_lyrics  String
  translation String
  note        String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@index([audio_url], name: "audio_url_idx")
}

model EnglishQuestion {
  id          Int      @id @default(autoincrement())
  question    String
  options     String[]
  answer      String
  explanation String
  type        QuestionType
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_THE_BLANK
}

model Sentence {
  id          Int      @id @default(autoincrement())
  title       String
  translation String
  explanation String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
